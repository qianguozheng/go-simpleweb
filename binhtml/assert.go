// Code generated by go-bindata.
// sources:
// template/portal.html
// DO NOT EDIT!

package binhtml

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatePortalHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5b\x6f\x1b\xc7\x15\x7e\xde\xfd\x15\xe3\x7d\x08\x97\x36\xb9\x2b\x21\x79\x28\x24\xad\x0a\x5b\x76\x6c\x17\xbe\x08\x8e\x0c\xa7\x48\x03\x63\xb8\x3b\x24\xc7\x9e\x9d\x59\xef\x0c\x2f\x2a\x43\xc0\x51\x03\xdf\xe2\x5b\x10\xbb\xa8\x2f\x35\x90\x20\x4e\x84\x36\xb1\xd4\x06\xae\x5c\x57\x8e\xfe\x8c\x97\xa2\x9f\xfa\x17\x8a\x99\x59\x2e\x97\x92\x08\xb3\x41\x51\x64\x1f\xc8\xb9\x9c\x73\xe6\xcc\x37\xe7\x36\xd3\xe9\x04\xa8\x8a\x29\x02\xd6\x39\xe4\xd7\xa1\x58\x84\x31\x0c\xad\x6e\xd7\x9c\xdb\x77\xf8\xf4\xc2\xd2\x6f\x17\x8f\x80\x63\x4b\x27\x4f\xcc\x9b\x73\x75\x11\x12\xf9\x87\x60\x00\x08\xa4\x35\xcf\xfa\x7d\xbd\xbc\x70\xca\x9a\x37\x01\x00\x60\x2e\x44\x02\x02\xbf\x0e\x63\x8e\x84\x67\x9d\x5d\x7a\xbf\xfc\xab\xc1\x94\xc0\x82\xa0\xf9\xe4\xa7\x67\xaf\xb7\xbe\xea\x6f\x3d\x39\x87\xcb\xef\xe3\x39\x57\x8f\xe6\x98\x29\x0c\x91\x67\x35\x31\x6a\x45\x2c\x16\x16\xf0\x19\x15\x88\x0a\xcf\x6a\xe1\x40\xd4\xbd\x00\x35\xb1\x8f\xca\xaa\x53\x02\x98\x62\x81\x21\x29\x73\x1f\x12\xe4\x4d\x5b\xc0\x9d\x48\xd4\x0e\x36\x67\xaa\x04\x42\xd8\xc6\x61\x23\xcc\x0f\x35\x38\x8a\x55\x1f\x56\x08\xf2\x28\xb3\x76\xcb\x86\x51\x44\x50\x39\x64\x15\x4c\x50\xb9\x85\x2a\x65\x18\x45\x65\x1f\x46\x92\x23\xb7\xde\x32\xe2\x93\x32\x73\x01\x45\x83\x97\x2b\x30\x2e\x73\xb1\x3c\x22\xa5\x42\xa0\x7f\x71\x0f\x39\x55\x16\x87\x50\x94\x03\x24\x90\x2f\x30\xa3\x39\x16\x81\x08\x8a\xea\x8c\xe6\xd5\xe7\x7e\x8c\x23\x01\xc4\x72\x84\x24\x41\x5b\xb8\x17\x60\x13\xea\x51\x6b\xde\x34\x0c\x77\xff\x7e\xd3\x30\xc0\x7e\x30\x7a\x56\xc9\xad\x3b\xfd\x67\xcf\xde\x75\xa6\x5f\xff\xf4\xa8\xbf\x75\xb7\x7f\xf7\x69\x72\xff\x8a\x04\x16\x92\xe4\x8b\xcd\xfe\xf3\x0d\x4d\xde\x7b\x7e\xa7\xff\xdd\xb5\xe4\xc1\xea\xeb\x57\x5b\xdb\xf7\x56\x95\x24\xd7\x34\x8c\x26\x8c\x01\x61\x30\x38\x5e\x8d\x61\x88\x80\x07\x68\x83\x90\xd9\x74\x82\xb2\x33\x88\x47\x8c\xf2\x9d\x13\x3e\x24\xe4\x6c\xb4\x84\x43\xc4\x05\x0c\x23\xe0\x81\xa9\x59\xd3\x34\x8c\x6a\x83\xaa\xbd\x82\xa8\x21\x4e\x65\xcc\x36\x6a\x16\x3b\xa6\x61\x18\xc0\x27\x08\xc6\x92\x8d\x35\x84\x3d\x94\x5e\x94\x72\xbb\x52\x00\xc8\x24\xa0\x38\x66\xf1\x6f\x1a\x61\x64\x17\xe5\xb8\xe6\xd7\x4a\xb5\xa4\x36\xa8\x05\x0e\x43\x81\xec\xa2\x53\x43\x42\x8a\xb4\x95\x14\x03\xe0\xaa\x6d\x4b\x9a\xf2\x4e\x2d\x8b\x60\x1e\xbc\xb7\x7f\x7a\x6a\x6a\x4a\x6b\x63\x80\x18\x89\x46\x4c\x35\x5b\x57\xfd\x42\x82\x62\x61\x17\xfa\x6b\x4f\x87\x80\xbd\xb8\xd5\xbb\xb7\xd6\xbb\xf9\x69\xff\xea\x5f\x92\x1b\xab\xfd\x8d\x1f\xfb\xaf\xbe\x4f\xcf\x60\x6d\xa3\x77\xfd\xf3\xe4\xc6\x6a\xef\xfa\x97\xc9\xe6\x65\x3d\xf8\x3b\x9a\x7c\xbb\xd2\x7b\xf2\x38\xd9\xf8\xbb\xa6\xed\xaf\x6d\x24\x5b\xaf\xb6\xef\x3f\xed\xfd\xf0\x4d\xef\xce\xdd\xed\x6f\x5e\x16\x94\xaa\x40\xef\x38\x5c\x3e\x06\x69\x40\x50\x0c\xbc\x6c\xf7\xb6\xda\x7d\x31\xdd\x75\x0e\x0a\xcd\x37\x3b\x0a\x95\x1f\x23\x28\x90\x3e\x41\xbb\x38\x44\x0a\x0f\xce\x34\x60\x7e\x23\x44\x54\x38\x9a\xf2\x08\x41\xb2\x67\x5b\x9a\xc0\xd2\x52\xe5\xa7\x07\x1c\x65\xe2\x8e\xcf\xf9\x12\x6a\x0b\xe0\x01\x2b\xc0\x3c\x22\x70\x79\x86\x32\x8a\x66\x95\x93\xcf\x4c\x45\xed\xd9\x3a\xc2\xb5\xba\x50\x4d\x2b\x93\x91\x2d\x56\x61\xc1\xb2\x03\xa3\x08\xd1\x60\xa1\x8e\x49\x60\x6b\xe9\xc3\xd5\x46\xec\x4e\x4f\xa6\xb8\x18\x86\xeb\xf6\x7e\x5c\x4d\xae\xdc\x4c\x1e\x3d\xe9\xaf\xff\x21\xb9\xfa\xaa\x77\x7f\x3d\x6f\x60\x17\x38\xa3\xd1\x02\x24\xa4\x02\xfd\x8b\x76\x8c\x78\x83\x08\xbd\x75\x5c\x4d\xbb\xe0\x9d\x77\x80\x6e\x39\xbc\xe1\xfb\x88\xf3\x14\x1b\x00\x06\xe7\x7c\x0e\x2d\xd4\xa1\x00\x2d\x4c\x88\xb2\x16\xd0\x88\xc0\x0c\x28\x80\x03\x3b\x18\xc1\x01\x50\x00\x20\x80\x02\xce\xe4\x26\x65\x3f\x35\x3a\x00\x14\xe2\x0d\xe8\x51\xd8\xc4\x35\x28\x58\xec\xc8\x40\x75\xb0\x86\xa8\x50\x24\x06\xae\x02\xbb\x01\x1d\x4c\x03\xd4\x3e\x5d\xb5\x2d\xbc\x28\x23\x80\x55\x04\xfb\x3c\x50\x9e\x06\x9f\x7c\x32\x3a\xc9\x02\xab\xb8\xcf\x2b\x4f\xef\x1c\x87\xc1\x80\xa5\x08\x3a\x00\x00\xd7\xd5\x82\xd4\x1a\x46\x06\x3e\x61\x3e\x54\x40\x79\x79\x6d\xb5\x26\x5d\x44\x38\xea\x98\x9a\x03\x57\xed\x42\x15\x12\x8e\x0a\x9e\x57\x10\x71\x03\x15\x52\xef\x30\x8c\x14\xa4\x8f\x92\xcd\x97\xc9\xb5\x7f\x7c\xfc\x7f\x71\x0a\xf9\xe5\xdc\x32\x0d\x0b\x1a\xe1\x51\x3b\x9f\x1d\x8e\xef\x8a\x46\x63\xa3\x83\x31\x6a\x77\x0e\x8f\x7d\x6f\x17\x3e\xc6\x48\xdc\xe3\x5a\x80\x8c\x58\x99\x7b\x66\x10\xed\x70\x4d\x6d\xd7\xc0\xe8\x96\xde\x95\x61\x26\x85\xdb\x1c\x60\x0e\x46\x6c\x73\xdf\x5e\xc6\x99\x82\xbe\xcb\xc2\xba\x83\x08\x99\x79\x80\x2e\x09\xce\x1f\x65\x82\x9d\x41\x01\x8e\x91\x2f\x6c\x18\x45\xc7\x83\x12\x40\x6d\x81\x68\x50\x02\x62\x00\x49\x09\x70\x5c\xa3\x25\xc0\xeb\x4c\x11\xc0\x86\xa8\x9f\x8d\x89\xcc\xaf\x7e\x09\x70\x8e\x83\x12\xa8\xc8\xbf\xa2\x36\x0b\xd7\x4d\xd6\xaf\xe4\x5d\x2f\xb9\x7b\x6b\xfb\xbb\xf5\xe4\xc5\xb7\xc9\xb5\xf5\xde\xe3\x5b\xc9\x8d\xaf\x92\x07\xab\xdb\x7f\x5d\x93\xc4\xca\xf0\x63\x22\xe3\x44\x5d\x88\x88\xcf\xb8\x6e\x0b\x57\xb1\xd3\x42\xb8\x8d\xa9\x73\xe9\x92\xe3\xb3\xd0\x65\x11\x8a\xa5\x5b\xb8\xf2\xb4\xb4\xee\x87\x62\xd6\xe2\x28\x76\xda\xb2\x7a\xf9\xb5\xd2\xdd\xb3\xc0\x01\xa0\x5a\x29\xc0\xa3\xdf\x01\x60\xbd\xa3\x37\xa7\x08\x75\x73\x2c\x65\xb6\x7d\x45\x9c\xf5\xc6\xd2\x4b\x8c\x14\xa9\x6c\xcc\x0e\x80\x50\x76\x2b\x47\x92\xbb\xb7\xdf\xfc\xf9\xeb\xed\x87\x9f\x25\x77\x56\x7a\xf7\xd7\x7b\x8f\xaf\x27\x97\x37\xff\xbd\x79\x33\xb9\xf6\xa0\xf7\xa7\xb5\xde\x1f\xd7\xdf\x75\xa6\x93\x3b\x5f\xf4\x9f\x6f\x6c\x3f\xfc\xac\xf7\xfc\xd3\xed\xd5\xcf\xd3\x78\x94\xc2\x2d\x0f\x5d\x9f\x80\x84\x59\xa9\xf1\xb3\x70\xfb\x65\x02\x36\x9e\x4a\x6d\x59\xd3\xa9\xe6\x58\xca\x14\x27\xad\x2a\xf5\x59\x80\xce\x9e\x39\xbe\xc0\xc2\x88\x51\x99\xaf\xd2\xe9\xe2\x58\xfe\x10\xfa\x8a\x37\x84\xfe\x78\x6d\x38\x4e\x75\xe1\x78\xbc\x26\x95\x8c\x4c\xb5\xb4\x31\x74\x53\x93\x78\x73\xf9\x61\x7f\xeb\x6a\xc0\xc2\xde\x97\xb7\x5e\xbf\x7a\x9c\x5c\x7b\x94\xfc\xeb\xa5\xae\xd4\xfa\x37\x56\xb6\x57\xfe\x99\x3c\x7b\xb2\x7d\x7b\x3d\xd9\x5c\xe9\xfd\xf0\x54\x86\xc3\xbf\xad\x0c\xfc\x24\xad\xf2\xc6\xa6\xe4\x82\x26\x48\x63\xa1\xee\x38\x1c\x89\x83\x42\xc4\xb8\xd2\x10\xc8\x2e\xf0\xd8\x2f\x94\xa4\xc3\x69\x9a\x4c\x50\x0d\x89\x54\x0a\x3f\xb4\xbc\x04\x6b\xa7\x64\x94\x2c\xc8\x1b\x41\xa1\xf8\xd1\xd4\xc7\x23\x99\x58\x0b\x4e\xcb\xae\x5c\x4c\x81\x17\x60\xdb\x96\xa2\x3b\xe6\x30\xa9\xb5\x43\x22\xed\x73\x90\xb6\x65\x1e\x6b\x61\x1a\xb0\x96\xf3\xe1\xc9\x13\xc7\x84\x88\xce\xa0\x4b\x0d\xc4\x45\xc6\x24\xbf\x94\x29\x8d\xc5\xa3\x84\x76\x56\x02\x74\xd3\x7f\x19\x1c\xd3\xe6\x78\x21\x07\x7d\x81\x9b\xe8\xc3\xd3\x95\x0b\x32\xd4\x59\x27\xb1\x1f\x33\xce\xaa\x42\xa9\xb1\xb4\xb4\x68\xe5\xc4\x9a\x20\xf7\xa5\x62\x1c\x16\x21\x6a\x5b\x47\x8f\x2c\x59\x0a\xbf\x12\x90\xe9\xae\x38\xbb\x27\x2d\x47\x34\xb0\xc7\xcc\x31\x1a\x23\x18\x2c\xcb\x3b\x81\xf4\x47\x5a\x43\xf9\xd2\xad\xd8\x19\x61\x1a\x40\x36\x60\x56\xac\x1f\x48\x56\xe0\x79\xe0\xbd\xe2\x2e\xe2\xdd\xec\x40\xa5\x79\x9d\x18\xac\x1a\x13\x32\xa3\xab\xec\x64\xed\x50\x70\xf0\xed\x95\x1a\x0a\x9d\x8e\x73\x50\xc6\x89\x6e\xb7\x50\x02\xb2\x77\x44\x05\x83\xac\x9b\xe5\xcf\x6c\xe4\x03\x5c\xa3\xc3\x8e\x72\xdd\xac\x7b\x50\xfb\x62\xd6\x3f\x09\xfd\x21\x29\xc7\x43\xc2\x43\x5c\xf7\xf6\x50\xb5\xbb\x6b\x44\xd9\xc1\x64\x80\xa4\x70\x54\x21\x26\x28\x18\x07\x84\x26\xda\x0d\xfd\x44\xe4\xfa\xce\xf7\x56\xbd\x55\x54\xe8\x9a\xc6\x9c\xab\xbd\x2a\xbd\xcf\x11\x4c\x2f\x82\x18\x11\xcf\x52\xd5\x34\xaf\x23\x24\x2c\x50\x8f\x51\x55\x8e\x40\x81\x7d\xd7\xe7\xdc\x55\x93\x65\x8e\x43\x79\xe9\xac\x32\x42\x58\x4b\x16\xde\x96\x3b\x6f\xce\xb9\xd2\x79\xe7\xcd\x39\x59\x48\x03\x9f\x40\xce\x3d\x2b\x64\xc1\x28\xb5\x35\x6f\xce\x05\xb8\x39\x76\xbe\x1c\xc1\x1a\x1a\x5c\x32\xdf\x4a\x78\xfe\x7c\x05\x52\x8a\xe2\x94\x41\x31\xe1\xb0\x36\x19\x53\xb9\x52\xb3\x80\xac\xa8\x06\x1b\xc4\x21\xac\x21\xee\xca\x12\xbd\x16\xb3\x06\x0d\x9c\x0b\x51\xcd\x02\x90\x08\xcf\xb2\xdc\xdc\x12\x13\xe8\x85\xc3\x5a\x99\xd7\x61\x20\x77\x3c\xe7\x06\xb8\xf9\xdf\xb1\x13\x56\x63\xb9\x4d\x4d\xba\x31\xc9\x56\xc6\xe1\xde\xfb\x12\x83\x54\x2d\xa9\x9c\x88\xee\xb5\x35\xb5\x50\x34\xd1\x32\x54\xde\xc5\xe6\xe7\xdc\xe8\x67\x71\xb7\x10\xf1\x99\x14\xd0\xfb\xfe\xeb\xfe\xd6\xed\xde\xca\xea\x88\xa4\x1c\x64\xf9\xe6\x04\xc8\x41\x21\x10\x55\x0f\x18\x39\x69\x6f\xd5\x29\xe3\x2a\x8b\xb6\x18\x28\xa5\xdf\x1e\x76\xbe\x35\xe5\xb5\x84\x93\xcb\xad\x08\x6a\x01\x46\x7d\x82\xfd\x8b\x9e\xb5\xab\xaa\xb4\x8b\xd6\xfc\xeb\x17\x97\xdf\xdc\x7b\x96\xbf\x87\x0c\x57\x85\x23\x60\x64\x7f\xd2\xd7\xe6\xcd\xb7\xbe\xc6\x0c\xef\xde\xbb\xd7\xed\x98\x2a\x09\xb9\xee\xff\xa0\x1c\x37\xd5\x55\xf8\x17\x1e\xcf\x55\xd5\xa0\x6a\xd8\x19\xd7\xed\x74\x9c\xa3\xad\xe3\x8b\xdd\xee\x8c\x6a\x2d\xb2\x58\x74\xbb\xae\x34\x51\xaa\x13\x74\x96\xc9\x96\xea\x98\x03\xcc\xc1\x61\x14\xb2\xc1\x54\x5a\x58\x0c\x6e\xaf\xde\x24\x52\x67\x4d\xa3\x6b\x0e\xa3\xef\xdb\x0f\x2f\x2b\x99\x60\x10\x1c\x69\x22\x2a\x4e\x60\x2e\x10\x45\xb1\x5d\x68\x62\x8e\x2b\x98\x60\xb1\xac\x13\x7b\xa1\x34\xfa\x94\x55\x02\xea\xae\x5c\x9c\xcd\x2f\x28\x23\xb5\x7a\x7f\xed\x74\xd4\x01\x98\xff\x09\x00\x00\xff\xff\xf1\xae\x27\x5d\xb8\x15\x00\x00")

func templatePortalHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatePortalHtml,
		"template/portal.html",
	)
}

func templatePortalHtml() (*asset, error) {
	bytes, err := templatePortalHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/portal.html", size: 5560, mode: os.FileMode(420), modTime: time.Unix(1488286467, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/portal.html": templatePortalHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"portal.html": &bintree{templatePortalHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

